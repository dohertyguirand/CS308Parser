#
# Turtle Commands
#
FORWARD (FD) pixels -> moves turtle forward in its current heading by pixels distance, returns the value of pixels
BACK (BK) pixels -> moves turtle backward in its current heading by pixels distance, returns the value of pixels
LEFT|LT degrees -> turns turtle counterclockwise by degrees angle, returns the value of degrees
RIGHT|RT degrees -> turns turtle clockwise by degrees angle, returns the value of degrees
SETHEADING|SETH degees -> turns turtle to an absolute heading, returns number of degrees moved
TOWARDS x y -> turns turtle to face the point (x, y), where (0, 0) is the center of the screen, returns the number of degrees turtle turned
SETXY (GOTO) x y -> moves turtle to an absolute screen position, where (0, 0) is the center of the screen, returns the distance turtle moved
PENDOWN (PD) -> puts pen down such that when the turtle moves, it leaves a trail, returns 1
PENUP (PU) -> puts pen up such that when the turtle moves, it does not leave a trail, returns 0
SHOWTURTLE (ST) -> makes turtle visible, returns 1
HIDETURTLE (HT) -> makes turtle invisible, returns 0
HOME -> moves turtle to the center of the screen (0 0), returns the distance turtle moved
CLEARSCREEN (CS) -> erases turtle's trails and sends it to the home position, returns the distance turtle moved
#
# Turtle Queries
#
XCOR -> returns the turtle's X coordinate from the center of the screen
YCOR -> returns the turtle's Y coordinate from the center of the screen
HEADING -> returns the turtle's heading in degrees
PENDOWN? (PENDOWNP) -> returns 1 if turtle's pen is down, 0 if it is up
SHOWING? (SHOWINGP) -> returns 1 if turtle is showing, 0 if it is hiding
#
# Math Operations
#
SUM|\\+ = returns sum of the values of expr1 and expr2
DIFFERENCE|- = returns difference of the values of expr1 and expr2
PRODUCT|\\* = returns product of the values of expr1 and expr2
quotient|/ = returns quotient of the values of expr1 and expr2
remainder|% = returns remainder on dividing the values of expr1 by expr2
minus|~ = returns negative of the values of expr
random = returns random non-negative number strictly less than max
sin = returns sine of degrees
cos = return cosine of degrees
tan = returns tangent of degrees
atan = returns arctangent of degrees
log = returns natural log of expr
pow = returns base raised to the power of the exponent
pi = Reports the number Pi
#
# Boolean Operations
#
less\\?|lessp = returns 1 if the value of expr1 is strictly less than the value of expr2, otherwise 0
greater\\?|greaterp = returns 1 if the value of expr1 is strictly greater than the value of expr2, otherwise 0
equal\\?|equalp = returns 1 if the value of expr1 and the value of expr2 are equal, otherwise 0
notequal\\?|notequalp = returns 1 if the value of expr1 and the value of expr2 are not equal, otherwise 0
and = returns 1 if test1 and test2 are non-zero, otherwise 0
or = returns 1 if test1 or test2 are non-zero, otherwise 0
not = returns 1 if test is 0 and 0 if test is non-zero
#
# Variables, Control, and User-Defined Commands
#
make|set = assigns the value of expr to variable, creating the variable if necessary, returns expr
repeat = runs command(s) given in the list the value of expr number of times, returns the value of the final command executed (or 0 if no commands are executed), note, the value of the current iteration, starting at 1, is automatically assigned to the variable :repcount so that it can be accessed by the command(s)
dotimes = runs command(s) for each value specified in the range, i.e., from (1 - limit) inclusive, returns the value of the final command executed (or 0 if no commands are executed), note, variable is assigned to each succeeding value so that it can be accessed by the command(s)
for = runs command(s) for each value specified in the range, i.e., from (start - end), going by increment, returns the value of the final command executed (or 0 if no commands are executed), note, variable is assigned to each succeeding value so that it can be accessed by the command(s)
if = if expr is not 0, runs the command(s) given in the list, returns the value of the final command executed (or 0 if no commands are executed)
ifelse = if expr is not 0, runs the trueCommands given in the first list, otherwise runs the falseCommands given in the second list, returns the value of the final command executed (or 0 if no commands are executed)
to = assigns command(s) given in the second list to commandName using parameters given in first list as variables, when commandName is used later in a program, any given values are assigned to variables that can be accessed when the command list is run and the value of the final command executed is returned (or 0 if no commands are executed), returns 1 if command is successfully defined, otherwise 0